Exercise 1.5

Normal order is quite straightforward:
(test 0 (p))
->
(if (= 0 0) 0 (p))
->
(if <TRUE> 0 (p))
->
0

But applicative order could be tricky. Procedure 'p' is expanded to itself, infinitely (in theory).
(test 0 (p)) -> (test 0 (p)) -> ...


Exercise 1.6:
It can be shown easily, that procedure 'new-if' doesn't work like 'if'.

1 ]=> (sqrt-iter 1.0 9)

;Value: 3.00009155413138

1 ]=> (sqrt-iter-new 1.0 9)

;Aborting!: maximum recursion depth exceeded

It's because defined 'new-if' is standard procedure so it uses applicative order evaluation (-> sub-expressions evaluated before 'new-if' -> else-clause loop). This leads us to 'infinite' recursion (in reality stack overflow soon ofc).

Scheme's 'if' is a special form and it behaves differently. Firstly, predicate is evaluated and according to that it evaluates either true or false clause. This key difference, because 'new-if' evaluates both.


Exercise 1.10
Values of requested expressions:

1 ]=> (A 1 10)

;Value: 1024

1 ]=> (A 2 4)

;Value: 65536

1 ]=> (A 3 3)

;Value: 65536

Mathematical definitions of requested procedures:
(define (f n) (A 0 n)) -> 2 * n

(define (g n) (A 1 n)) -> 2^n

(define (h n) (A 2 n)) -> 2^2^2^2^ .. (n-times)

(define (k n) (* 5 n n)) -> 5 * n^2


Exercise 1.34

I called this procedure f34 instead:
1 ]=> (f34 (lambda (z) ( * z ( + z 1))))

;Value: 6


1 ]=> (f34 f34)

;The object 2 is not applicable.
;To continue, call RESTART with an option number:
; (RESTART 2) => Specify a procedure to use in its place.
; (RESTART 1) => Return to read-eval-print level 1.

Error message 'The object 2 is not applicable' is caused because of following evaluation:
(f34 f34) -> (f34 2) -> (2 2) -> Error ('2' is not a function ofc) 


Exercise 1.38
Firstly, procedure 'cont-frac' which computes value of the k-term finite continued fraction (from Exercise 1.37):

(define (cont-frac n d k) 
  (define (loop i) 
    (if (> i k) 0 
        (/ (n i) (+ (d i) (loop (+ i 1))))
  )) 
  (loop 1)
) 

and procedure 'euler' for 'e' approximation based on Euler's expansion can be defined:

(define (euler k) 
  (+ 2.0 (cont-frac (lambda (i) 1) 
                    (lambda (i)
                      (if (= (remainder i 3) 2)
                      (/ (+ i 1) 1.5) 1)
                    ) 
                    k)
)) 

Example:
1 ]=> (euler 10)

;Value: 2.7182817182817183


Exercise 1.41
Procedure 'double':
(define (double f) (lambda (x) (f (f x))))

Example:
1 ]=> ((double square) 5)

;Value: 625

1 ]=> ((double ( double inc)) 5)   

;Value: 9


Exercise 1.42
Procedure 'compose':
(define (compose f g) (lambda (x) (f (g x)))) 

Example:
1 ]=> ((compose square inc) 6)

;Value: 49


Exercise 1.43
Procedure 'repeated':
(define (repeated f n)
  (cond 
    ((< n 0) (error "Illegal argument, N must be greater or equal to zero"))
    ((= n 0) (lambda (x) x))
    (else (compose f (repeated f (- n 1))))
  ))

Example:
1 ]=> ((repeated square 2 ) 5)

;Value: 625




Remarks:

Following verison of MIT Scheme was used:

petr@petr-lenovo ~ $ scheme
MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2011 Massachusetts Institute of Technology
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.

Image saved on Tuesday November 8, 2011 at 10:40:30 PM
  Release 9.1.1   || Microcode 15.3 || Runtime 15.7 || SF 4.41
  LIAR/i386 4.118 || Edwin 3.116


